# this pipeline should only be executed on master branch
version: '1.0'

steps:

  main_clone:
    title: 'Cloning main repository...'
    type: git-clone
    repo: codefresh-io/cli
    revision: ${{CF_BRANCH}}
    git: cf_github

  fail_if_not_master:
    title: "Validate running on master branch"
    image: codefresh/build-cli
    commands:
      - 'echo This pipeline should be run only on master'
      - 'exit 1'
    when:
      branch:
        ignore: [ master ]

  extract_version:
    title: "Exporting package.json version"
    image: codefresh/build-cli
    commands:
      - 'export PACKAGE_VERSION=$(jq -r ".version" package.json)'
      - "echo Current version: $PACKAGE_VERSION"
      - "cf_export PACKAGE_VERSION"

# in case the candidate image will not be found the release flow will crash and this means that the build pipelines has failed
  push_step:
    type: push
    title: "Push release image"
    image_name: codefresh/cli
    tags:
      - ${{PACKAGE_VERSION}}
      - latest
    scale:
      push_to_dockerhub:
        registry: dockerhub
        title: "push to dockerhub"
        candidate: codefresh/cli:${{CF_SHORT_REVISION}}
      push_to_gcr:
        title: "push to gcr"
        candidate: gcr.io/codefresh-inc/codefresh/cli:${{CF_SHORT_REVISION}}
      push_to_quay:
        registry: cf-quay
        title: "push to quay.io"
        candidate: quay.io/codefresh/cli:${{CF_SHORT_REVISION}}

  create_manifest_list:
    type: "codefresh-inc/multiarch-manifester"
    arguments:
      image_name: codefresh/cli
      arch_tag_postfixes:
        arm64: "${{ARM_TAG_POSTFIX}}"
      registries:
        - name: 'quay.io'
          username: '${{QUAY_USERNAME}}'
          password: '${{QUAY_PASSWORD}}'
        - name: 'docker.io'
          username: '${{DOCKERHUB_USERNAME}}'
          password: '${{DOCKERHUB_PASSWORD}}'
        - name: 'gcr.io'
          path_prefix: codefresh-inc
          username: '${{GCR_CODEFRESH_INC_USERNAME}}'
          password: '${{GCR_CODEFRESH_INC_PASSWORD}}'
    scale:
      master_branch_tags:
        arguments:
          tags:
            - ${{PACKAGE_VERSION}}
            - latest

  generate_comletion:
    title: "Generating commands completion tree"
    image: codefresh/build-cli
    commands:
      - "yarn install"
      - "yarn generate-completion"

  deploy_to_npm:
    title: "Publishing To Npm"
    image: codefresh/npm-publish:master
    commands:
      - NPM_TOKEN=${{NPM_TOKEN}} npm run ci-publish

  compile_executables:
    title: "Compiling executables"
    image: codefresh/build-cli
    commands:
      - "rm -rf dist"
      - "yarn pkg"

  create_release:
    title: "Create github release"
    image: codefresh/build-cli
    fail_fast: false
    commands:
      - 'curl --fail -X POST -d ''{"tag_name":"v${{PACKAGE_VERSION}}","target_commitish":"${{CF_REVISION}}","name":"Codefresh V${{PACKAGE_VERSION}}"}'' -H "Content-Type: application/json" -H "Authorization: token ${{GITHUB_TOKEN}}" https://api.github.com/repos/codefresh-io/cli/releases'

  get_release:
    title: "Get github release"
    image: codefresh/build-cli
    commands:
      - "curl --fail https://api.github.com/repos/codefresh-io/cli/releases/tags/v${{PACKAGE_VERSION}}"
      - "export GITHUB_RELEASE_ID=$(curl --fail https://api.github.com/repos/codefresh-io/cli/releases/tags/v${{PACKAGE_VERSION}} | jq -r '.id')"
      - "echo Github release id: $GITHUB_RELEASE_ID"
      - "cf_export GITHUB_RELEASE_ID"

  upload_executables:
    title: "Upload executables to github release"
    image: codefresh/build-cli
    commands:
# delete all previous .zip/.gz created files and copy readme and license to ./dist
      - "rm -rf *.gz"
      - "rm -rf *.zip"
      - "cp README.md LICENSE ./dist --force"
# upload linux-x64 asset
      - "mv ./dist/codefresh-linux ./dist/codefresh"
      - "tar -cf codefresh-v${{PACKAGE_VERSION}}-linux-x64.tar README.md LICENSE -C ./dist ./codefresh "
      - "gzip codefresh-v${{PACKAGE_VERSION}}-linux-x64.tar"
      - 'curl --fail -X POST -H "Content-Type:application/octet-stream" -H "Authorization: token ${{GITHUB_TOKEN}}"  --data-binary @codefresh-v${{PACKAGE_VERSION}}-linux-x64.tar.gz https://uploads.github.com/repos/codefresh-io/cli/releases/${{GITHUB_RELEASE_ID}}/assets?name=codefresh-v${{PACKAGE_VERSION}}-linux-x64.tar.gz'
# upload macos-x64 asset
      - "mv ./dist/codefresh-macos ./dist/codefresh"
      - "tar -cf codefresh-v${{PACKAGE_VERSION}}-macos-x64.tar README.md LICENSE -C ./dist ./codefresh "
      - "gzip codefresh-v${{PACKAGE_VERSION}}-macos-x64.tar"
      - 'curl --fail -X POST -H "Content-Type:application/octet-stream" -H "Authorization: token ${{GITHUB_TOKEN}}"  --data-binary @codefresh-v${{PACKAGE_VERSION}}-macos-x64.tar.gz https://uploads.github.com/repos/codefresh-io/cli/releases/${{GITHUB_RELEASE_ID}}/assets?name=codefresh-v${{PACKAGE_VERSION}}-macos-x64.tar.gz'
# upload win-x64 asset
      - "mv ./dist/codefresh-win.exe ./dist/codefresh.exe"
      - "zip codefresh-v${{PACKAGE_VERSION}}-win-x64.zip README.md LICENSE -j ./dist/codefresh.exe "
      - 'curl --fail -X POST -H "Content-Type:application/octet-stream" -H "Authorization: token ${{GITHUB_TOKEN}}"  --data-binary @codefresh-v${{PACKAGE_VERSION}}-win-x64.zip https://uploads.github.com/repos/codefresh-io/cli/releases/${{GITHUB_RELEASE_ID}}/assets?name=codefresh-v${{PACKAGE_VERSION}}-win-x64.zip'
# upload alpine-x64 asset
      - "mv ./dist/codefresh-alpine ./dist/codefresh"
      - "tar -cf codefresh-v${{PACKAGE_VERSION}}-alpine-x64.tar README.md LICENSE -C ./dist ./codefresh "
      - "gzip codefresh-v${{PACKAGE_VERSION}}-alpine-x64.tar"
      - 'curl --fail -X POST -H "Content-Type:application/octet-stream" -H "Authorization: token ${{GITHUB_TOKEN}}"  --data-binary @codefresh-v${{PACKAGE_VERSION}}-alpine-x64.tar.gz https://uploads.github.com/repos/codefresh-io/cli/releases/${{GITHUB_RELEASE_ID}}/assets?name=codefresh-v${{PACKAGE_VERSION}}-alpine-x64.tar.gz'

  update_documentation:
    title: "Update documentation http://cli.codefresh.io"
    image: docker:18.01
    commands:
      - "apk update && apk add git nodejs"
      - "npm install"
      - "echo cleaning previous public dir and recreating worktree"
      - "rm -rf public && git worktree prune &&   git worktree add -B gh-pages public origin/gh-pages"
      - "echo Building public docs"
      - "npm run build-public-docs"
      - "echo Push new docs to gh-pages detached branch"
      - 'git config --global user.email "auto-ci@codefresh.io" && git config --global user.name "Automated CI"'
      - 'cd public && git add --all && git commit -m "Publish new documentation for version ${{PACKAGE_VERSION}}" && git push https://${{GITHUB_TOKEN}}@github.com/codefresh-io/cli.git'
    environment:
        - HUGO_VERSION=0.32.0

  update_brew_formula:
    title: "Updating homebrew formula"
    image: codefresh/build-cli
    commands:
      - VERSION=v${{PACKAGE_VERSION}}
      - curl -L https://github.com/codefresh-io/cli/releases/download/$VERSION/codefresh-$VERSION-macos-x64.tar.gz > $VERSION.tar.gz
      - echo "compute SHA256 ..."
      - SHA256="$(shasum -a 256 ./$VERSION.tar.gz | awk '{print $1}')"
      - echo "generate file from template ..."
      - sed -e "s/{{ VERSION }}/$VERSION/g" -e "s/{{ SHA256 }}/$SHA256/g" ./brew/template.rb > codefresh.rb
      - echo "Updating file in GitHub"
      - |
        curl -v -i -X PUT -H 'Authorization: token '${{GITHUB_TOKEN}}'' -d "{ \
          \"message\": \"update formula version $VERSION\", \
          \"content\": \"$(openssl base64 -A -in codefresh.rb)\", \
          \"sha\": $(curl -X GET https://api.github.com/repos/codefresh-io/homebrew-cli/contents/Formula/codefresh.rb | jq .sha) \
          }" https://api.github.com/repos/codefresh-io/homebrew-cli/contents/Formula/codefresh.rb
