# this pipeline should not be run on version tag releases (it may cause a non correct sha to override version tagged image in dockerhub)
version: "1.0"
mode: parallel
stages:
  - prepare
  - test
  - build
  - push
  - docker
  - final
steps:

  main_clone:
    stage: prepare
    title: 'Cloning main repository...'
    type: git-clone
    repo: codefresh-io/cli
    revision: ${{CF_BRANCH}}
    git: cf_github

  extract_version:
    stage: prepare
    title: "Exporting package.json version"
    image: codefresh/build-cli
    commands:
      - 'export PACKAGE_VERSION=$(jq -r ".version" package.json)'
      - "echo Current version: $PACKAGE_VERSION"
      - "cf_export PACKAGE_VERSION"
    when:
      steps:
        - name: main_clone
          on:
            - success

  check_version:
    stage: prepare
    title: 'Checking if version already exists'
    image: codefresh/build-cli
    fail_fast: false
    commands:
      - >-
        RELEASE_ID="$(curl -s https://api.github.com/repos/codefresh-io/cli/releases/tags/v${{PACKAGE_VERSION}} | jq .id)"
        echo "Release id: $RELEASE_ID"

        if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = 'null' ]; then
          echo "Version is ok: ${{PACKAGE_VERSION}}"
        else
          echo "Release already exists ${{PACKAGE_VERSION}}"
          exit 1
        fi
    when:
      condition:
        all:
          skipVersionCheck: '"${{SKIP_VERSION_CHECK}}" != "true"'
      steps:
        - name: extract_version
          on:
            - success

  install_dependencies:
    stage: test
    title: 'Installing testing dependencies'
    image: codefresh/build-cli
    commands:
      - yarn install --frozen-lockfile
    when:
      steps:
        - name: extract_version
          on:
            - success

  parallel_tests:
    stage: test
    type: parallel
    steps:
      eslint:
        title: 'Running linting logic'
        image: codefresh/build-cli
        commands:
          - yarn eslint

      unit_tests:
        title: 'Running unit tests'
        image: codefresh/build-cli
        commands:
          - yarn test

      # Disabled e2e tests because of flakyness
      # need to fix flakyness before enabling again.
      #
      # e2e_tests:
      #   title: 'Running e2e tests'
      #   image: codefresh/build-cli
      #   commands:
      #     - "echo Running e2e on account: ${{CF_ACCOUNT}}"
      #     - CF_API_KEY=${{CF_E2E_API_KEY}} yarn e2e
    when:
      branch:
        ignore: [ master ]
      steps:
        - name: install_dependencies
          on:
            - success

  build_images:
    stage: build
    type: parallel
    steps:

      build_step_alpine:
        type: build
        dockerfile: Dockerfile
        image-name: codefresh/cli
        tag: ${{CF_BRANCH_TAG_NORMALIZED}}

      build_step_debian:
        type: build
        dockerfile: Dockerfile-debian
        image-name: codefresh/cli
        tag: ${{CF_BRANCH_TAG_NORMALIZED}}${{DEBIAN_TAG_POSTFIX}}

      build_step_alpine_rootless:
        type: build
        dockerfile: Dockerfile-rootless
        image-name: codefresh/cli
        tag: ${{CF_BRANCH_TAG_NORMALIZED}}${{ROOTLESS_TAG_POSTFIX}}

      build_step_debian_rootless:
        type: build
        dockerfile: Dockerfile-debian-rootless
        image-name: codefresh/cli
        tag: ${{CF_BRANCH_TAG_NORMALIZED}}${{DEBIAN_TAG_POSTFIX}}${{ROOTLESS_TAG_POSTFIX}}
    when:
      steps:
        - name: extract_version
          on:
            - success

  run_arm_build:
    stage: build
    type: codefresh-run
    arguments:
      PIPELINE_ID: codefresh-io/cli/build-arm
      TRIGGER_ID: codefresh-io/cli
      BRANCH: ${{CF_BRANCH}}
      DETACH: false
      VARIABLE:
        - CF_REPO_OWNER=${{CF_REPO_OWNER}}
        - CF_REPO_NAME=${{CF_REPO_NAME}}
        - CF_REVISION=${{CF_REVISION}}
        - CF_BRANCH=${{CF_BRANCH}}
        - CF_SHORT_REVISION=${{CF_SHORT_REVISION}}
        - GIT_CONTEXT=cf_github
        - IMAGE_NAME=codefresh/cli
        - WORKDIR=${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        - ARM_TAG_POSTFIX="${{ARM_TAG_POSTFIX}}"
        - DEBIAN_TAG_POSTFIX="${{DEBIAN_TAG_POSTFIX}}"
        - ROOTLESS_TAG_POSTFIX="${{ROOTLESS_TAG_POSTFIX}}"
        - PACKAGE_VERSION=${{PACKAGE_VERSION}}
    when:
      steps:
        - name: extract_version
          on:
            - success

  push_step_alpine:
    stage: push
    type: push
    tag: '${{CF_SHORT_REVISION}}'
    candidate: ${{build_step_alpine}}
    scale:
      push_to_dockerhub:
        registry: dockerhub
        title: "push to dockerhub"
      push_to_gcr:
        title: "push to gcr"
      push_to_quay:
        registry: cf-quay
        title: "push to quay.io"
    when:
      steps:
        - name: build_images
          on:
            - success

  push_step_debian:
    stage: push
    type: push
    tag: '${{CF_SHORT_REVISION}}${{DEBIAN_TAG_POSTFIX}}'
    candidate: ${{build_step_debian}}
    scale:
      push_to_dockerhub_debian:
        registry: dockerhub
        title: "push to dockerhub"
      push_to_gcr_debian:
        title: "push to gcr"
      push_to_quay_debian:
        registry: cf-quay
        title: "push to quay.io"
    when:
      steps:
        - name: build_images
          on:
            - success

  push_step_alpine_rootless:
    stage: push
    type: push
    tag: '${{CF_SHORT_REVISION}}${{ROOTLESS_TAG_POSTFIX}}'
    candidate: ${{build_step_alpine_rootless}}
    scale:
      push_to_dockerhub_rootless:
        registry: dockerhub
        title: "push to dockerhub"
      push_to_gcr_rootless:
        title: "push to gcr"
      push_to_quay_rootless:
        registry: cf-quay
        title: "push to quay.io"
    when:
      steps:
        - name: build_images
          on:
            - success

  push_step_debian_rootless:
    stage: push
    type: push
    tag: '${{CF_SHORT_REVISION}}${{DEBIAN_TAG_POSTFIX}}${{ROOTLESS_TAG_POSTFIX}}'
    candidate: ${{build_step_debian_rootless}}
    scale:
      push_to_dockerhub_debian_rootless:
        registry: dockerhub
        title: "push to dockerhub"
      push_to_gcr_debian_rootless:
        title: "push to gcr"
      push_to_quay_debian_rootless:
        registry: cf-quay
        title: "push to quay.io"
    when:
      steps:
        - name: build_images
          on:
            - success

  create_manifest_list:
    stage: docker
    type: "codefresh-inc/multiarch-manifester"
    arguments:
      image_name: codefresh/cli
      arch_tag_postfixes:
        arm64: "${{ARM_TAG_POSTFIX}}"
      registries:
        - name: 'quay.io'
          username: '${{QUAY_USERNAME}}'
          password: '${{QUAY_PASSWORD}}'
        - name: 'docker.io'
          username: '${{DOCKERHUB_USERNAME}}'
          password: '${{DOCKERHUB_PASSWORD}}'
        - name: 'gcr.io'
          path_prefix: codefresh-inc
          username: '${{GCR_CODEFRESH_INC_USERNAME}}'
          password: '${{GCR_CODEFRESH_INC_PASSWORD}}'
    scale:
      dev_branches_tags:
        when:
          branch:
            ignore: [ master ]
        arguments:
          tags:
            - ${{CF_SHORT_REVISION}}
      dev_branches_tags_debian:
        when:
          branch:
            ignore: [ master ]
        arguments:
          tags:
            - ${{CF_SHORT_REVISION}}${{DEBIAN_TAG_POSTFIX}}
      dev_branches_tags_rootless:
        when:
          branch:
            ignore: [ master ]
        arguments:
          tags:
            - ${{CF_SHORT_REVISION}}${{ROOTLESS_TAG_POSTFIX}}
      dev_branches_tags_debian_rootless:
        when:
          branch:
            ignore: [ master ]
        arguments:
          tags:
            - ${{CF_SHORT_REVISION}}${{DEBIAN_TAG_POSTFIX}}${{ROOTLESS_TAG_POSTFIX}}
    when:
      steps:
        - name: push_step_alpine
          on:
            - success
        - name: push_step_debian
          on:
            - success
        - name: push_step_alpine_rootless
          on:
            - success
        - name: push_step_debian_rootless
          on:
            - success
        - name: run_arm_build
          on:
            - success

  fail_on_bad_version:
    stage: final
    image: codefresh/build-cli
    commands:
      - exit 1
    when:
      condition:
        all:
          versionCheckFailed: steps.check_version.result == 'failure'
      steps:
        - name: create_manifest_list
          on:
            - success

  execute_release_pipeline:
    stage: final
    title: "Execute release pipeline in case version was changed"
    type: codefresh-run
    arguments:
      PIPELINE_ID: 'codefresh-io/cli/release'
      TRIGGER_ID: codefresh-io/cli_1
      BRANCH: master
      VARIABLE:
        - PACKAGE_VERSION=${{PACKAGE_VERSION}}
    when:
      branch:
        only: [ master ]
      condition:
        all:
          versionCheckSucceeded: steps.check_version.result != 'failure'
      steps:
        - name: create_manifest_list
          on:
            - success

  build_documentation:
    stage: test
    title: "build documentation http://cli.codefresh.io"
    image: codefresh/build-cli
    commands:
      - "echo Building public docs"
      - "yarn run build-public-docs"
    environment:
      - HUGO_VERSION=0.32.0
    when:
      steps:
        - name: install_dependencies
          on:
            - success
