{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "name": "Codefresh",
      "url": "https://www.codefresh.io"
    },
    "description": "Codefresh API openAPI 3.0 specification",
    "termsOfService": "https://codefresh.io/docs/docs/terms-and-privacy-policy/terms-of-service/",
    "title": "Codefresh API",
    "version": "0.0.1",
    "x-logo": {
      "url": "https://i.ibb.co/X7kg7jb/image.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Codefresh"
    }
  },
  "servers": [
    {
      "url": "https://g.codefresh.io/api"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "x-filters": [
    {
      "pathRegex": "/builds/{serviceId}/",
      "methods": [
        "post"
      ]
    },
    {
      "pathRegex": "/builds/{buildId}/update",
      "methods": [
        "post"
      ]
    },
    {
      "tags": [
        "users",
        "firebase",
        "version",
        "payments"
      ]
    }
  ],
  "x-tagGroups": [
    {
      "name": "Pipelines / Builds",
      "tags": [
        "builds",
        "images",
        "pipelines",
        "progress",
        "triggers",
        "triggers.events",
        "triggers.types",
        "version",
        "firebase"
      ]
    },
    {
      "name": "Kubernetes / Helm",
      "tags": [
        "kubernetes",
        "helm.boards",
        "helm.charts",
        "helm.releases",
        "helm.sections"
      ]
    },
    {
      "name": "Swarm",
      "tags": [
        "compositions",
        "environments"
      ]
    },
    {
      "name": "Integrations / Contexts",
      "tags": [
        "clusters",
        "contexts",
        "helm.repos",
        "registries",
        "repos"
      ]
    },
    {
      "name": "Account Management",
      "tags": [
        "abac",
        "accounts",
        "payments",
        "runtimeEnvs",
        "teams",
        "tokens",
        "users"
      ]
    },
    {
      "name": "On-Premise",
      "tags": [
        "features",
        "onPrem.runtimeEnvs",
        "onPrem.runtimeEnvs.account",
        "onPrem.runtimeEnvs.plan",
        "onPrem.runtimeEnvs.system"
      ]
    }
  ],
  "tags": [
    {
      "name": "Pipelines",
      "description": "pipelines",
      "x-id": "pipelines"
    },
    {
      "name": "Builds",
      "description": "builds",
      "x-id": "builds"
    },
    {
      "name": "Contexts",
      "description": "contexts",
      "x-id": "contexts"
    },
    {
      "name": "Images",
      "description": "images",
      "x-id": "images"
    },
    {
      "name": "Triggers",
      "description": "triggers",
      "x-id": "triggers"
    },
    {
      "name": "Triggers Types",
      "description": "triggers.types",
      "x-id": "triggers.types"
    },
    {
      "name": "Triggers Events",
      "description": "triggers.events",
      "x-id": "triggers.events"
    },
    {
      "name": "Environments",
      "description": "environments",
      "x-id": "environments"
    },
    {
      "name": "Compositions",
      "description": "compositions",
      "x-id": "compositions"
    },
    {
      "name": "Helm Charts",
      "description": "helm.charts",
      "x-id": "helm.charts"
    },
    {
      "name": "Helm Releases",
      "description": "helm.releases",
      "x-id": "helm.releases"
    },
    {
      "name": "Helm Repos",
      "description": "helm.repos",
      "x-id": "helm.repos"
    },
    {
      "name": "Helm Boards",
      "description": "helm.boards",
      "x-id": "helm.boards"
    },
    {
      "name": "Helm Sections",
      "description": "helm.sections",
      "x-id": "helm.sections"
    },
    {
      "name": "Repos",
      "description": "repos",
      "x-id": "repos"
    },
    {
      "name": "Teams",
      "description": "teams",
      "x-id": "teams"
    },
    {
      "name": "Kubernetes",
      "description": "kubernetes",
      "x-id": "kubernetes"
    },
    {
      "name": "Version",
      "description": "version",
      "x-id": "version"
    },
    {
      "name": "Firebase",
      "description": "firebase",
      "x-id": "firebase"
    },
    {
      "name": "Users",
      "description": "users",
      "x-id": "users"
    },
    {
      "name": "Runtime Environments",
      "description": "runtimeEnvs",
      "x-id": "runtimeEnvs"
    },
    {
      "name": "Registries",
      "description": "registries",
      "x-id": "registries"
    },
    {
      "name": "Codefresh Registry",
      "description": "Codefresh Registry",
      "x-id": "registries"
    },
    {
      "name": "Progress",
      "description": "progress",
      "x-id": "progress"
    },
    {
      "name": "Payments",
      "description": "payments",
      "x-id": "payments"
    },
    {
      "name": "Features",
      "description": "features",
      "x-id": "features"
    },
    {
      "name": "Clusters",
      "description": "clusters",
      "x-id": "clusters"
    },
    {
      "name": "Tokens",
      "description": "tokens",
      "x-id": "tokens"
    },
    {
      "name": "Runtime Environments",
      "description": "onPrem.runtimeEnvs",
      "x-id": "onPrem.runtimeEnvs"
    },
    {
      "name": "Runtime Environments (Plan)",
      "description": "onPrem.runtimeEnvs.plan",
      "x-id": "onPrem.runtimeEnvs.plan"
    },
    {
      "name": "Runtime Environments (System)",
      "description": "onPrem.runtimeEnvs.system",
      "x-id": "onPrem.runtimeEnvs.system"
    },
    {
      "name": "Runtime Environments (Account)",
      "description": "onPrem.runtimeEnvs.account",
      "x-id": "onPrem.runtimeEnvs.account"
    },
    {
      "name": "Accounts",
      "description": "accounts",
      "x-id": "accounts"
    },
    {
      "name": "Abac",
      "description": "abac",
      "x-id": "abac"
    }
  ],
  "paths": {
    "/audit/download": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "audit",
          "download"
        ],
        "operationId": "audit-download",
        "parameters": [
          {
            "name": "userName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by user name"
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by codefresh user id"
          },
          {
            "name": "entity",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api entity, example: pipeline, account"
          },
          {
            "name": "entityId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api entity id, this value different for each action, example: email, user id"
          },
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by api action, get possible values on /api/audit/entitiesList, you will see only actions which was happen in your account"
          },
          {
            "name": "rs_status",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by response status code"
          },
          {
            "name": "showTriggers",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "returns only actions related to receiving triggers"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "filter by searching substring in request body or query or params or headers or url"
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by date, value is number of milliseconds since 1970"
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "filter by date, value is number of milliseconds since 1970"
          },
          {
            "name": "sortField",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["id", "createdAt", "updatedAt"]
            },
            "description": "name of sorting field, values: id, createdAt, updatedAt"
          },
          {
            "name": "sortType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["ASK", "DESK"]
            },
            "description": "sorting type, values: ASK, DESK"
          }
        ],
        "summary": "Download",
        "x-sdk-interface": "audit.download",
        "x-endpoint": {
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "audit.download"
        }
      }
    },
    "/abac": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-list",
        "summary": "List rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.list"
      },
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "action": {
                    "type": "string"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rule",
        "parameters": [],
        "x-sdk-interface": "abac.rules.create"
      }
    },
    "/abac/batch": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create-or-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "create": {
                    "items": {
                      "$ref": "#/components/schemas/abac"
                    },
                    "type": "array"
                  },
                  "delete": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create or delete rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createOrDelete"
      }
    },
    "/abac/resource/{resource}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-list-by-resource",
        "summary": "Get rules by resource",
        "x-sdk-interface": "abac.rules.listByResource"
      }
    },
    "/abac/tags/rule/{rule}": {
      "post": {
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-tags-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update rule tags",
        "x-sdk-interface": "abac.rules.tags.update"
      }
    },
    "/abac/tags/rules": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-tags-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "rules": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rules tags",
        "parameters": [],
        "x-sdk-interface": "abac.rules.tags.create"
      }
    },
    "/abac/team/{teamId}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-list-by-team",
        "summary": "Get rules by team id",
        "x-sdk-interface": "abac.rules.listByTeam"
      }
    },
    "/abac/teamRules": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create-in-batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/abac"
              }
            }
          },
          "required": true
        },
        "summary": "Create rules in batch",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createInBatch"
      }
    },
    "/abac/{rule}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-delete",
        "summary": "Delete rule",
        "x-sdk-interface": "abac.rules.delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-get",
        "summary": "Get rule",
        "x-sdk-interface": "abac.rules.get"
      }
    },
    "/accounts/{accountId}/{userId}": {
      "delete": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-user-from-account",
        "summary": "Delete user from account",
        "x-sdk-interface": "accounts.deleteUserFromAccount"
      }
    },
    "/accounts/{accountId}/{userId}/adduser": {
      "post": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-add-existing-user-to-account",
        "summary": "Add existing user to account",
        "x-sdk-interface": "accounts.addExistingUserToAccount"
      }
    },
    "/accounts/{accountId}/{userId}/admin": {
      "delete": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-delete-admin",
        "summary": "Delete admin",
        "x-sdk-interface": "accounts.deleteAdmin"
      },
      "post": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-set-as-admin",
        "summary": "Set as admin",
        "x-sdk-interface": "accounts.setAsAdmin"
      }
    },
    "/accounts/{id}/adduser": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Adds a not existing user to an account. the provider field is optional and if not provided it will be taken from the account model",
        "operationId": "accounts-add-user-to-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userDetails": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Add user to account",
        "x-sdk-interface": "accounts.addUserToAccount"
      }
    },
    "/accounts/{id}/update": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet: update the user defined account fields. Receives a settings object (will be defined later)",
        "operationId": "accounts-update-account-public-settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "notifications": {
                    "items": {
                      "properties": {
                        "events": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "slack": {
                          "properties": {
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "enum": [
                            "webhook",
                            "slack"
                          ],
                          "type": "string"
                        },
                        "webhook": {
                          "properties": {
                            "method": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update account public settings",
        "x-sdk-interface": "accounts.updateAccountPublicSettings"
      }
    },
    "/accounts/{id}/updateuser": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-update-user-details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "settings": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update user details",
        "x-sdk-interface": "accounts.updateUserDetails"
      }
    },
    "/accounts/{id}/users": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "List users of an account",
        "operationId": "accounts-get-users-for-account",
        "summary": "Get users for account",
        "x-sdk-interface": "accounts.getUsersForAccount"
      }
    },
    "/admin/accounts": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "get all the accounts in the system",
        "operationId": "accounts-list-accounts",
        "summary": "List accounts",
        "parameters": [],
        "x-sdk-interface": "accounts.listAccounts"
      },
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Add new account. Receives an account object ",
        "operationId": "accounts-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add account",
        "parameters": [],
        "x-sdk-interface": "accounts.addAccount"
      }
    },
    "/admin/accounts/addpendinguser": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-add-pending-user-without-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "account": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "provider": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "userName": {
                    "type": "string"
                  }
                },
                "required": [
                  "userName",
                  "provider"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add pending user without account",
        "parameters": [],
        "x-sdk-interface": "accounts.addPendingUserWithoutAccount"
      }
    },
    "/admin/accounts/{id}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-account",
        "summary": "Delete account",
        "x-sdk-interface": "accounts.deleteAccount"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Get an account by id",
        "operationId": "accounts-get-by-id",
        "summary": "Get by id",
        "x-sdk-interface": "accounts.getById"
      }
    },
    "/admin/accounts/{id}/update": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet: Update the account info that only codefresh admins (codefresh employees, not account admin) can access",
        "operationId": "accounts-update-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "settings": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update account",
        "x-sdk-interface": "accounts.updateAccount"
      }
    },
    "/admin/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs"
        ],
        "operationId": "onPrem-runtimeEnvs-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountIds",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List",
        "x-sdk-interface": "onPrem.runtimeEnvs.list"
      }
    },
    "/admin/runtime-environments/account/default/{account}/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Set default for account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.setDefault"
      }
    },
    "/admin/runtime-environments/account/{account}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-list",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountIds",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get by account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.list"
      }
    },
    "/admin/runtime-environments/default/{plan}/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Set default",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.setDefault"
      }
    },
    "/admin/runtime-environments/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-update",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.update"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "successors",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.get"
      }
    },
    "/admin/runtime-environments/{plan}/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-update",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.update"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-delete",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-get",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "successors",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.get"
      }
    },
    "/pipelines/analyze": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-analyze",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/pipelines_analyze"
        },
        "summary": "Analyze pipeline",
        "x-sdk-interface": "pipelines.analyze"
      }
    },
    "/helm/cluster-config/{selector}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.cluster-config"
        ],
        "operationId": "helm-cluster-config-get",
        "parameters": [
          {
            "in": "path",
            "name": "selector",
            "description": "Cluster selector",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Get cluster config",
        "x-sdk-interface": "helm.cluster-config.get"
      }
    },

    "/annotations": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-delete",
        "summary": "Delete annotations",
        "parameters": [
          {
            "description": "id of annotation",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity type",
            "in": "query",
            "name": "entityType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "key of annotation",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "annotations.delete"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "entityId": {
                        "type": "string"
                      },
                      "entityType": {
                        "type": "string"
                      },
                      "entityName": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Annotations objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-list",
        "summary": "List",
        "parameters": [
          {
            "description": "id of annotation",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity type",
            "in": "query",
            "name": "entityType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "key of annotation",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "annotations.list"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "entityId": {
                      "type": "string"
                    },
                    "entityType": {
                      "type": "string"
                    },
                    "entityName": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Annotation object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_annotationOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "annotations.create"
      }
    },
    "/auth/key": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-generate",
        "parameters": [
          {
            "in": "query",
            "name": "subjectType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "subjectReference",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Generate",
        "x-sdk-interface": "tokens.generate"
      }
    },
    "/auth/key/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "tokens.delete"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-patch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Patch",
        "x-sdk-interface": "tokens.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "x-action": "getTokenById",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-get-by-id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "tokens.getById"
      }
    },
    "/auth/keys": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "tokens.list"
      }
    },
    "/builds/{buildId}": {
      "get": {
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "buildId",
            "required": true
          },
          {
            "name": "noAccount",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "noAccount",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-get-build",
        "summary": "Get",
        "x-sdk-interface": "workflows.getBuild"
      }
    },
    "/workflow": {
      "get": {
        "operationId": "workflows-list",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pipeline",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revision",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "revision sha"
          },
          {
            "name": "branchName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "branch name"
          },
          {
            "name": "pipelineTriggerId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pipeline trigger id"
          },
          {
            "name": "paginationReset",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Should pagination session be reseted to first page"
          },
          {
            "name": "paginationDirection",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Direction of the pagination: 'prev' or 'next'"
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Lower date filter bound"
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Upper date filter bound"
          }
          
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "List",
        "x-sdk-interface": "workflows.list"
      }
    },
    "/workflow/{workflowId}/data": {
      "post": {
        "operationId": "push-workflow-data",
        "parameters": [
          {
            "description": "id of a workflowId object",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "Builds"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Push New Workflow Data",
        "x-sdk-interface": "workflows.pushWorkflowData"
      },
      "get": {
        "operationId": "get-workflow-data",
        "parameters": [
          {
            "description": "id of a workflowId object",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "Builds"
        ],
        "summary": "Get Workflow Data",
        "x-sdk-interface": "workflows.getWorkflowData"
      }
    },
    "/workflow/{workflowId}/data/{id}": {
      "get": {
        "operationId": "get-workflow-data-item",
        "parameters": [
          {
            "description": "id of a workflowId object",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "decrypt",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": [
          "Builds"
        ],
        "summary": "Get Workflow Data Item",
        "x-sdk-interface": "workflows.getWorkflowDataItem"
      }
    },
    "/builds/{buildId}/update": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/buildId"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pullRequest": {
                    "properties": {
                      "createOnSuccess": {
                        "type": "boolean"
                      },
                      "mergeOnSuccess": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update",
        "x-sdk-interface": "workflows.update"
      }
    },
    "/builds/rebuild/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-restart",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Restart",
        "x-sdk-interface": "workflows.restart"
      }
    },
    "/builds/{serviceId}/": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/serviceId"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-build-by-service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "buildFlags": {
                    "properties": {
                      "nocache": {
                        "default": false,
                        "description": "use docker cache",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Build by service",
        "x-sdk-interface": "workflows.buildByService"
      }
    },
    "/clusters": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "clusters.list"
      }
    },
    "/helm/cluster-config/{selector}": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "helm-cluster-config-store",
        "parameters": [
          {
            "in": "path",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Store cluster config",
        "x-sdk-interface": "helm.cluster-config.store",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "helm.storeClusterConfig"
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "helmVersion": {
                    "type": "string"
                  },
                  "deleteReleasePipeline": {
                    "type": "string"
                  },
                  "testReleasePipeline": {
                    "type": "string"
                  },
                  "rollbackPipeline": {
                    "type": "string"
                  },
                  "tillerNamespace": {
                    "type": "string"
                  },
                  "releaseNamespaces": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        }
      }
    },
    "/clusters/{provider}/cluster/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-delete",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "clusters.delete"
      }
    },
    "/compositions": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "compositions.list"
      },
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "isAdvanced": {
                    "default": false,
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "compositions.create"
      }
    },
    "/compositions/{id}/run": {
      "post": {
        "parameters": [
          {
            "description": "id or name of a composition",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "vars": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "x-sdk-interface": "compositions.launch"
      }
    },
    "/compositions/{id}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-delete",
        "summary": "Delete",
        "x-sdk-interface": "compositions.delete"
      },
      "get": {
        "parameters": [
          {
            "description": "id or name of a composition",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-get",
        "summary": "Get",
        "x-sdk-interface": "compositions.get"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "isAdvanced": {
                    "default": false,
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "default": [],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update the name/variables/body of the composition with the id inserted",
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "compositions.update"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-patch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "compositions.patch"
      }
    },
    "/compositions/{id}/duplicate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-duplicate",
        "summary": "Duplicate",
        "x-sdk-interface": "compositions.duplicate"
      }
    },
    "/contexts": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-list",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "decrypt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List",
        "x-sdk-interface": "contexts.list"
      }
    },
    "/contexts/": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-create",
        "parameters": [
          {
            "in": "query",
            "name": "skipValidation",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "contexts.create"
      }
    },
    "/contexts/{name}": {
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "contexts.delete"
      },
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-replace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Replace",
        "x-sdk-interface": "contexts.replace"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-patch",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "contexts.patch"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "decrypt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "contexts.get"
      }
    },
    "/contexts/{name}/prepare": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-prepare",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }],
        "summary": "Get",
        "x-sdk-interface": "contexts.prepare"
      }
    },
    "/environments": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "envs.list"
      }
    },
    "/environments/all/terminate": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-terminate-all",
        "summary": "Terminate all",
        "parameters": [],
        "x-sdk-interface": "envs.terminateAll"
      }
    },
    "/environments/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-get",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "envs.get"
      }
    },
    "/environments/{id}/pause": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-pause",
        "summary": "Pause",
        "x-sdk-interface": "envs.pause"
      }
    },
    "/environments/{id}/rename/{newName}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the environment to rename",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The new name to assign to the environment",
            "in": "path",
            "name": "newName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-rename",
        "summary": "Rename",
        "x-sdk-interface": "envs.rename"
      }
    },
    "/environments/{id}/start": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-start",
        "summary": "Start",
        "x-sdk-interface": "envs.start"
      }
    },
    "/environments/{id}/status": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-status",
        "summary": "Status",
        "x-sdk-interface": "envs.status"
      }
    },
    "/environments/{id}/stop": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-stop",
        "summary": "Stop",
        "x-sdk-interface": "envs.stop"
      }
    },
    "/environments/{id}/terminate": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "envs.terminate"
      }
    },
    "/environments/{id}/unpause": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-unpause",
        "summary": "Unpause",
        "x-sdk-interface": "envs.unpause"
      }
    },
    "/features/{accountId}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the account to query for feature availability",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "features"
        ],
        "operationId": "features-account",
        "summary": "Account",
        "x-sdk-interface": "features.account"
      }
    },
    "/helm/boards": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-delete-all",
        "summary": "Delete all",
        "parameters": [],
        "x-sdk-interface": "helm.boards.deleteAll"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Board objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "helm.boards.list"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_boardOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.boards.create"
      }
    },
    "/helm/boards/name/{name}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardName"
          },
          {
            "description": "include sections in response",
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.boards.getByName"
      }
    },
    "/helm/boards/sections": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_sectionOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.sections.create"
      }
    },
    "/helm/boards/sections/reorder": {
      "post": {
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-reorder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "[sectionId]": {
                    "example": "<section index>",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Reorder",
        "parameters": [],
        "x-sdk-interface": "helm.sections.reorder"
      }
    },
    "/helm/boards/sections/{id}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.sections.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-get",
        "summary": "Get",
        "x-sdk-interface": "helm.sections.get"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.sections.patch"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.sections.update"
      }
    },
    "/helm/boards/{boardId}/sections": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-delete-all",
        "summary": "Delete all",
        "x-sdk-interface": "helm.sections.deleteAll"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-list",
        "summary": "List",
        "x-sdk-interface": "helm.sections.list"
      }
    },
    "/helm/boards/{boardId}/sections/name/{name}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          },
          {
            "$ref": "#/components/parameters/sectionName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.sections.getByName"
      }
    },
    "/helm/boards/{id}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.boards.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-get",
        "summary": "Get",
        "x-sdk-interface": "helm.boards.get"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.boards.patch"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.boards.update"
      }
    },
    "/helm/repos": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "helm.repos.create"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List",
        "x-sdk-interface": "helm.repos.list"
      }
    },
    "/helm/repos/{name}": {
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "helm.repos.delete"
      },
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-update",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update",
        "x-sdk-interface": "helm.repos.update"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "helm.repos.get"
      }
    },
    "/hermes/events": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-create",
        "parameters": [
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "triggers.events.create"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-list",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List",
        "x-sdk-interface": "triggers.events.list"
      }
    },
    "/hermes/events/{event}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-get",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "triggers.events.get"
      }
    },
    "/hermes/events/{event}/{context}": {
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-delete",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "triggers.events.delete"
      }
    },
    "/hermes/triggers": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "triggers.list"
      }
    },
    "/hermes/triggers/event/{event}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-get-event-triggers",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Get event triggers",
        "x-sdk-interface": "triggers.getEventTriggers"
      }
    },
    "/hermes/triggers/pipeline/{pipeline}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-get-pipeline-triggers",
        "parameters": [
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Get pipeline triggers",
        "x-sdk-interface": "triggers.getPipelineTriggers"
      }
    },
    "/hermes/triggers/{event}/{pipeline}": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-create",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "triggers.create"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-delete",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "triggers.delete"
      }
    },
    "/hermes/types": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers.types"
        ],
        "operationId": "triggers-types-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "triggers.types.list"
      }
    },
    "/hermes/types/{type}/{kind}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "triggers.types"
        ],
        "operationId": "triggers-types-get",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "kind",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "triggers.types.get"
      }
    },
    "/hermes/version": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-hermes-version",
        "parameters": [],
        "summary": "Get hermes version",
        "x-sdk-interface": "version.getHermesVersion"
      }
    },
    "/images": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "metadata",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "branch",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "imageDisplayNameRegex",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sha",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "imageRepo",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List",
        "x-sdk-interface": "images.list"
      }
    },
    "/images/external": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-add-from-external-source",
        "summary": "Add from external source",
        "parameters": [],
        "x-sdk-interface": "images.addFromExternalSource"
      }
    },
    "/images/{id}": {
      "get": {
        "parameters": [
          {
            "description": "id of the Image",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get",
        "summary": "Get",
        "x-sdk-interface": "images.get"
      }
    },
    "/images/{id}/tags": {
      "get": {
        "parameters": [
          {
            "description": "name of the image",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get-tags",
        "summary": "Get tags",
        "x-sdk-interface": "images.getTags"
      }
    },
    "/images/{id}/tag/{tag}": {
      "post": {
        "parameters": [
          {
            "description": "image ObjectId",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tag",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "registry",
            "in": "query",
            "name": "registry",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-tag",
        "summary": "Tag",
        "x-sdk-interface": "images.tag"
      },
      "delete": {
        "parameters": [
          {
            "description": "image ObjectId",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tag ObjectId",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "registry",
            "in": "query",
            "name": "registry",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-untag",
        "summary": "Untag",
        "x-sdk-interface": "images.untag"
      }
    },
    "/images/{dockerImageId}/metadata": {
      "get": {
        "parameters": [
          {
            "description": "id of the Image (from docker inspect)",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get-metadata",
        "summary": "Get metadata",
        "x-sdk-interface": "images.getMetadata"
      },
      "post": {
        "parameters": [
          {
            "description": "id of the Image (from docker inspect)",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-upsert-metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "CF_QUALITY": {
                    "default": true,
                    "type": "boolean"
                  },
                  "comment": {
                    "default": "image for qa",
                    "type": "string"
                  },
                  "coverage": {
                    "default": "60%",
                    "type": "string"
                  },
                  "failed_tests": {
                    "default": 7,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Upsert metadata",
        "x-sdk-interface": "images.upsertMetadata"
      }
    },
    "/images/{dockerImageId}/metadata/{keyName}": {
      "delete": {
        "parameters": [
          {
            "description": "id of the Image from docker inspect",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the metadata key",
            "in": "path",
            "name": "keyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-delete-metadata",
        "summary": "Delete metadata",
        "x-sdk-interface": "images.deleteMetadata"
      }
    },
    "/kubernetes/releases/{releaseName}/delete": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.releases"
        ],
        "operationId": "helm-releases-delete",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Delete",
        "x-sdk-interface": "helm.releases.delete"
      }
    },
    "/kubernetes/rollback/{release}/{revision}": {
      "get": {
        "responses": {
          "200": {
            "description": "id of pipeline with rollback",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-rollback-release",
        "parameters": [
          {
            "in": "path",
            "name": "release",
            "schema": {
              "type": "string"
            },
            "description": "release",
            "required": true
          },
          {
            "in": "path",
            "name": "revision",
            "schema": {
              "type": "string"
            },
            "description": "revision",
            "required": true
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Rollback",
        "x-sdk-interface": "kubernetes.rollback"
      }
    },
    "/kubernetes/releases/{releaseName}/test": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.releases"
        ],
        "operationId": "helm-releases-test",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Test",
        "x-sdk-interface": "helm.releases.test"
      }
    },
    "/kubernetes/secrets/imagePullSecret": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-generate-image-pull-secret",
        "parameters": [
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Generate image pull secret",
        "x-sdk-interface": "kubernetes.generateImagePullSecret"
      }
    },
    "/kubernetes/chart/install": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.charts"
        ],
        "operationId": "helm-charts-install",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Install",
        "x-sdk-interface": "helm.charts.install"
      }
    },
    "/kubernetes/chart/promote": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "helm.charts"
        ],
        "operationId": "helm-charts-promote",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Promote",
        "x-sdk-interface": "helm.charts.promote"
      }
    },
    "/charts/{repo}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "charts"
        ],
        "operationId": "charts-list",
        "parameters": [
          {
            "in": "path",
            "name": "repo",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get charts by repo",
        "x-sdk-interface": "charts.list"
      }
    },
    "/nomios/version": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-nomios-version",
        "parameters": [],
        "summary": "Get nomios version",
        "x-sdk-interface": "version.getNomiosVersion"
      }
    },
    "/payments": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "payments.list"
      },
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "couponId": {
                    "type": "string"
                  },
                  "plan": {
                    "properties": {
                      "builds": {
                        "default": 2,
                        "type": "integer"
                      },
                      "environments": {
                        "default": 2,
                        "type": "integer"
                      },
                      "id": {
                        "default": "BASIC",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "token": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "payments.create"
      }
    },
    "/payments/plans": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-get-plans",
        "summary": "Get plans",
        "parameters": [],
        "x-sdk-interface": "payments.getPlans"
      }
    },
    "/pipelines": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "pipelines"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "project id"
          }
        ],
        "operationId": "pipelines-list",
        "summary": "List",
        "x-sdk-interface": "pipelines.list"
      },
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "pipelines.create"
      }
    },
    "/pipelines/names": {
      "get": {
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            },
            "description": "Labels"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "project id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-names",
        "summary": "Get",
        "x-sdk-interface": "pipelines.getNames",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getAllAccountPipelinesNames"
        }
      }
    },
    "/pipelines/run": {
      "post": {
        "responses": {
          "200": {
            "description": "ok",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Endpoint to query the build status"
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-run-yaml",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Run yaml",
        "x-sdk-interface": "pipelines.runYaml"
      }
    },
    "/pipelines/run/{name}": {
      "post": {
        "responses": {
          "200": {
            "description": "ok",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Endpoint to query the build status"
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-run",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Run",
        "x-sdk-interface": "pipelines.run"
      }
    },
    "/pipelines/debug/{name}": {
      "post": {
        "responses": {
          "200": {
            "description": "ok",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Endpoint to query the build status"
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-debug",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Debug",
        "x-sdk-interface": "pipelines.debug"
      }
    },
    "/pipelines/yaml/validator": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-validate-yaml",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Validate yaml",
        "x-sdk-interface": "pipelines.validateYaml"
      }
    },
    "/pipelines/{name}": {
      "delete": {
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-delete",
        "summary": "Delete",
        "x-sdk-interface": "pipelines.delete"
      },
      "get": {
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "decryptVariables",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get",
        "summary": "Get",
        "x-sdk-interface": "pipelines.get"
      },
      "put": {
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "should skip trigger validation",
            "in": "query",
            "name": "skipTriggerValidation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "allows to omit revision validation - will use revision of existing pipeline",
            "in": "query",
            "name": "disableRevisionCheck",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-replace",
        "summary": "Replace",
        "x-sdk-interface": "pipelines.replace"
      }
    },

    "/step-types": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "steps"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id or name"
          },
          {
            "in": "query",
            "name": "official",
            "schema": {
              "type": "string"
            },
            "description": "Filter only official steps"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by a specific category"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Filter by a specific tag"
          },
          {
            "in": "query",
            "name": "freeText",
            "schema": {
              "type": "string"
            },
            "description": "Filter by name, description or tags"
          },
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            },
            "description": "Filter only public steps"
          },
          {
            "in": "query",
            "name": "private",
            "schema": {
              "type": "string"
            },
            "description": "Filter only private steps"
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string",
              "enum": ["graduated", "incubating"]
            },
            "description": "Filter by stage"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          }
        ],
        "operationId": "steps-list",
        "summary": "List",
        "x-sdk-interface": "steps.list",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticated"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getAllAccountSteps"
        }
      },
      "post": {
        "x-entityId": {
          "pathName": "body.metadata.name"
        },
        "x-action": "stepCreated",
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "steps"
        ],
        "operationId": "steps-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "steps.create",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticated"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.createStep"
        }
      }
    },
    "/step-types/names": {
      "get": {
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            },
            "description": "Labels"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "steps"
        ],
        "operationId": "steps-get-names",
        "summary": "Get all step names",
        "x-sdk-interface": "steps.getNames",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticated"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getAllAccountStepsNames"
        }
      }
    },
    "/step-types/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "steps"
        ],
        "operationId": "steps-get",
        "summary": "Get step",
        "x-sdk-interface": "steps.get",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticated"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getStepByNameOrId"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updateStep",
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "steps"
        ],
        "operationId": "steps-replace",
        "summary": "Replace",
        "x-sdk-interface": "steps.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticated"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.replaceStepByName"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "stepDeleted",
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "steps"
        ],
        "operationId": "steps-delete",
        "summary": "Delete",
        "x-sdk-interface": "steps.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticated"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.deleteStepByName"
        }
      }
    },
    "/step-types/{name}/versions": {
      "get": {
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-get-version",
        "summary": "Get Versions",
        "x-sdk-interface": "steps.getStepVersions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getStepVersions"
        }
      }
    },

    "/projects": {
      "post": {
        "x-action": "createProject",
        "x-entityId": {
          "pathName": "body.projectName"
        },
        "x-sdk-interface": "projects.create",
        "operationId": "projects-create",
        "summary": "Create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "x-sdk-interface": "projects.list",
        "operationId": "projects-list",
        "summary": "List",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "tags",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "x-sdk-interface": "projects.get",
        "operationId": "projects-get",
        "summary": "Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "x-action": "updateProject",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-sdk-interface": "projects.patch",
        "operationId": "projects-patch",
        "summary": "Patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": [
                  "projectName",
                  "tags"
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "x-action": "deleteProject",
        "x-entityId": {
          "pathName": "params.id"
        },
        "x-sdk-interface": "projects.delete",
        "operationId": "projects-delete",
        "summary": "Delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/name/{name}": {
      "get": {
        "x-sdk-interface": "projects.getByName",
        "operationId": "projects-get-by-name",
        "summary": "Get by name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "project name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/context/{id}": {
      "put": {
        "x-action": "updateProjectContext",
        "x-entityId": {
          "pathName": "body.name",
          "pathId": "params.id"
        },
        "x-sdk-interface": "projects.updateContext",
        "operationId": "projects-update-context",
        "summary": "Update context",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "x-action": "deleteProjectContext",
        "x-entityId": "params.id",
        "x-sdk-interface": "projects.deleteContext",
        "operationId": "projects-delete-context",
        "summary": "Delete context",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/json"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/progress/download/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "progress structure"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-download",
        "summary": "Download",
        "x-sdk-interface": "progress.download"
      }
    },
    "/progress/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "progress structure"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-get",
        "summary": "Get",
        "x-sdk-interface": "progress.get"
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "progress structure"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "progress.terminate"
      }
    },
    "/registry/auth/token": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "codefresh-registry-generate-cfcr-token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Generate cfcr token",
        "parameters": [],
        "x-sdk-interface": "registries.generateCfcrToken"
      }
    },
    "/repos": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-git-list",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List git repos (github, bitbucket, etc)",
        "x-sdk-interface": "repos.git.list"
      }
    },
    "/registries": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-list",
        "parameters": [],
        "summary": "List registries",
        "x-sdk-interface": "registries.list"
      },
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "behindFirewall": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "domain",
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Create",
        "x-sdk-interface": "registries.create"
      }
    },
    "/registries/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "registries.delete"
      }
    },
    "/registries/test": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-test",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "behindFirewall": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "domain",
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Test",
        "x-sdk-interface": "registries.test"
      }
    },
    "/repos/existing": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-list",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "thin",
            "schema": {
              "type": "string"
            },
            "allowEmptyValue": true
          }
        ],
        "summary": "List",
        "x-sdk-interface": "repos.list"
      }
    },
    "/repos/settings/{repoOwner}/{repoName}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/repoOwner"
          },
          {
            "$ref": "#/components/parameters/repoName"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-get-settings",
        "summary": "Get settings",
        "x-sdk-interface": "repos.getSettings"
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-git-get-repo",
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "repo",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get git repo",
        "x-sdk-interface": "repos.git.get"
      }
    },
    "/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "List",
        "x-sdk-interface": "runtimeEnvs.list"
      }
    },
    "/runtime-environments/default/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Set default",
        "x-sdk-interface": "runtimeEnvs.setDefault"
      }
    },
    "/runtime-environments/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-update",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update",
        "x-sdk-interface": "runtimeEnvs.update"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "runtimeEnvs.delete"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "runtimeEnvs.get"
      }
    },
    "/runtime/testit": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "runtime-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "repoData": {
                    "properties": {
                      "url": {
                        "properties": {
                          "https": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "repoName": {
                    "type": "string"
                  },
                  "repoOwner": {
                    "type": "string"
                  },
                  "serviceId": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "parameters": [],
        "x-sdk-interface": "runtime.launch"
      }
    },
    "/services": {
      "post": {
        "parameters": [
          {
            "description": "The git context name",
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "serviceDetails": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "scm": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "owner": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "repos.create"
      }
    },
    "/services/{name}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "repos.get"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "repos.delete"
      }
    },
    "/team": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "type": "string"
                  },
                  "users": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Team data",
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "teams.create"
      },
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "teams.list"
      }
    },
    "/team/group/synchronize/name/{name}/type/{type}": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-synchronize-client-with-group",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "access_token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "disableNotifications",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Disable send notifications"
          }
        ],
        "summary": "Synchronize client with group",
        "x-sdk-interface": "teams.synchronizeClientWithGroup"
      }
    },
    "/team/{teamId}/{userId}/assignUserToTeam": {
      "put": {
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user id for assign",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-add-user",
        "summary": "Add user",
        "x-sdk-interface": "teams.addUser"
      }
    },
    "/team/{teamId}/{userId}/deleteUserFromTeam": {
      "put": {
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user id for assign",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-remove-user",
        "summary": "Remove user",
        "x-sdk-interface": "teams.removeUser"
      }
    },
    "/team/{userId}/findTeamsByUser": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-list-by-user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "List by user",
        "x-sdk-interface": "teams.listByUser"
      }
    },
    "/user": {
      "get": {
        "responses": {
          "200": {
            "description": "user structure"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-get",
        "summary": "Get",
        "parameters": [],
        "x-sdk-interface": "users.get"
      }
    },
    "/user/context": {
      "get": {
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-notify-context-created",
        "summary": "Notify context created",
        "parameters": [],
        "x-sdk-interface": "auth.notifyContextCreated"
      }
    },
    "/user/changeaccount/{accountId}": {
      "post": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user structure"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-change-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Change account",
        "x-sdk-interface": "users.changeAccount"
      }
    },
    "/user/firebaseAuth": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "progressId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token"
          }
        },
        "tags": [
          "firebase"
        ],
        "operationId": "firebase-get-token",
        "summary": "Get token",
        "x-sdk-interface": "firebase.getToken"
      }
    },
    "/version": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-server-version",
        "parameters": [],
        "summary": "Get server version",
        "x-sdk-interface": "version.getServerVersion"
      }
    },
    "/workflow/{buildId}/pending-approval/approve": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "workflow",
          "build",
          "approve"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "buildId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "workflow-approve",
        "summary": "Approve a pending-approval workflow",
        "x-sdk-interface": "workflows.approve"
      }
    },
    "/workflow/{buildId}/pending-approval/deny": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "workflow",
          "build",
          "deny"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "buildId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "workflow-deny",
        "summary": "Deny a pending-approval workflow",
        "x-sdk-interface": "workflows.deny"
      }
    },
    "/custom_clusters/register": {
      "post": {
        "x-action": "registerCluster",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req",
            "required": true
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "cluster-register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": "string"
                  },
                  "storageClassName": {
                    "type": "string"
                  },
                  "runnerType": {
                    "type":"string"
                  },
                  "dockerDaemonParams": {
                    "type":"string"
                  },
                  "nodeSelector": {
                    "type":"string"
                  },
                  "annotations": {
                    "type":"string"
                  },
                  "clusterName": {
                    "type":"string"
                  },
                  "runtimeEnvironmentName": {
                    "type":"string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Cluster data",
          "required": true
        },
        "summary": "Cluster",
        "parameters": [],
        "x-sdk-interface": "cluster.create"
      }

    },
    "/agents": {
      "post": {
        "x-action": "createAgent",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req",
            "required": true
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "runtimes": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Agent data",
          "required": true
        },
        "summary": "Agent",
        "parameters": [],
        "x-sdk-interface": "agents.create"
      },
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "agent name"
          }
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agent.getAgents"
      },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agents-byName",
        "summary": "List",
        "x-sdk-interface": "agents.list"
      }
    },
    "/agents/name/{name}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "agent name"
          }
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "agents.getByName"
      },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-byName",
        "summary": "List",
        "x-sdk-interface": "agents.getByName"
      }
    },
    "/agent/{agentId}": {
      "put": {
        "x-entityId": "params.agentId",
        "x-action": "updateAgent",
        "parameters": [
          {
            "description": "Id of the agent",
            "in": "path",
            "name": "agentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "runtimes": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
            }
          }
        }
      },
        "tags": [
          "agents"
        ],
        "operationId": "agents-replace",
        "summary": "Replace",
        "x-sdk-interface": "agents.update"
  },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "agent id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "agents"
        ],
        "operationId": "agent-list",
        "summary": "Get",
        "x-sdk-interface": "agents.get"
      },
      "delete": {
        "x-action": "deleteAgent",
        "x-entityId": "params.agentId",
        "x-sdk-interface": "agents.delete",
        "operationId": "agent-delete",
        "summary": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "agentId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "agent id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "agents"
        ]
      }
    },
    "/runner-installation": {
      "post": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "runner-installation.createNewInstallationProgress"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runner-installation"
        ],
        "operationId": "runner-installation-create",
        "summary": "Create new runner installation progress",
        "x-sdk-interface": "runner-installation.createNewInstallationProgress",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        }
      }
    },
    "/runner-installation/{id}": {
      "get": {
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "runner-installation.getInstallationProgress"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runner-installation"
        ],
        "operationId": "runner-installation-get",
        "summary": "Get new session of runner installation progress",
        "x-sdk-interface": "runner-installation.getInstallationProgress"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "runner-installation.reportInstallationProgressEvent"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runner-installation"
        ],
        "operationId": "runner-installation-update",
        "summary": "Update runner-installation progress",
        "x-sdk-interface": "runner-installation.reportInstallationProgressEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "accountName": {
        "in": "path",
        "name": "accountName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardId": {
        "in": "query",
        "name": "boardId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardIdpath": {
        "description": "id of a board",
        "in": "path",
        "name": "boardId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardName": {
        "description": "name of a board",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "buildId": {
        "description": "id of a build object",
        "in": "path",
        "name": "buildId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "id": {
        "description": "id of an object",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoName": {
        "description": "repository name",
        "in": "path",
        "name": "repoName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoOwner": {
        "description": "name of owner of repository",
        "in": "path",
        "name": "repoOwner",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sectionName": {
        "description": "name of a section",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "serviceId": {
        "description": "id of a service object",
        "in": "path",
        "name": "serviceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "abac": {
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resource": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "requestBodies": {
      "create_boardOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_sectionOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "boardId": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "index": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "section": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "updateAccountAccountdetails": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "settings": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "create_annotationOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "entityId": {
                  "type": "string"
                },
                "entityType": {
                  "type": "string"
                },
                "entityName": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "pipelines_analyze": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "repo": {
                  "type": "object"
                },
                "type": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "abac": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "resource": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Json": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/requestBody"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  }
}
