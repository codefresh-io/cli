#!/usr/bin/env node

const path = require('path');
const recursive = require('recursive-readdir');
const _ = require('lodash');
const fs = require('fs');

function _resolveCommandName(command) {
    return command.command.split(' ')[0];
}

function _buildSubCommandTree(command) {
    let subCommandTree = {
        __positionalHandler: command.positionalHandler ? command.completionPath : undefined,
        __optionHandlers: command.optionHandlers,
    };
    const commandName = _resolveCommandName(command);
    if (!_.isEmpty(command.subCommands)) {
        const subTrees = command.subCommands.map(c => _buildSubCommandTree(c));
        subCommandTree = _.assignIn(subCommandTree, ...subTrees);
    }
    const commandTree = { [commandName]: subCommandTree };
    command.aliases.forEach((alias) => {
        // alias is for dynamic completion and subCommandTree is for cascade aliased commands
        commandTree[alias] = _.assignIn({ alias: commandName }, subCommandTree);
        commandTree[alias].__positionalHandler = undefined;
        commandTree[alias].__optionHandlers = undefined;
    });
    return commandTree;
}

function _setHandlersRecursively(command, optionHandler, isRoot = false) {
    if (!optionHandler) {
        if (isRoot) {
            _setHandlersRecursively(command, command.optionHandler ? command.completionPath : null);
            if (!_.isEmpty(command.subCommands)) {
                command.subCommands.forEach((sc) => {
                    _setHandlersRecursively(sc, null, true);
                });
            }
        }
        return;
    }

    command.optionHandlers = _.concat([optionHandler], command.optionHandlers || []);
    if (!_.isEmpty(command.subCommands)) {
        command.subCommands.forEach((sc) => {
            _setHandlersRecursively(sc, optionHandler);
        });
    }
}

function _validateRecursively(command) {
    if (!_.isEmpty(command.subCommands)) {
        if (command.positionalHandler) {
            throw new Error(`This command cannot have positional completions -- it has sub-commands. Path: ${command.completionPath}`);
        }
        command.subCommands.forEach(_validateRecursively);
    }
}

async function generate() {
    const rootCommands = [];
    const files = await recursive(path.resolve(__dirname, '..', 'commands'));
    _.forEach(files, (file) => {
        if (file.endsWith('.cmd.js')) {
            const command = require(file);
            if (command.isRoot()) {
                rootCommands.push(command);
            }
            const completionPath = file.replace('.cmd.js', '.completion.js');
            if (fs.existsSync(completionPath)) {
                const completion = require(completionPath);
                command.completionPath = path.relative(path.resolve(__dirname), completionPath); // relative to completion folder
                command.optionHandler = completion.optionHandler;
                command.positionalHandler = completion.positionalHandler;
            }
        }
    });

    rootCommands.forEach(_validateRecursively);
    rootCommands.forEach(rc => _setHandlersRecursively(rc, null, true));

    const rootSubTrees = rootCommands.map(c => _buildSubCommandTree(c));
    const tree = {
        codefresh: _.assignIn({}, ...rootSubTrees),
    };

    const treeString = JSON.stringify(tree);
    fs.writeFileSync(path.resolve(__dirname, 'tree.json'), treeString);

    console.log('Completion tree successfully generated:');
    console.log(treeString);
}

if (process.argv.includes(__filename)) {
    generate().catch((err) => {
        console.error(err.stack);
        process.exit(1);
    });
}

